<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xiong-zh.github.io</id>
    <title>张雄</title>
    <updated>2020-01-19T07:33:50.924Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://xiong-zh.github.io"/>
    <link rel="self" href="https://xiong-zh.github.io/atom.xml"/>
    <subtitle>凡心所向,素履所往。生如逆旅，一苇以航。</subtitle>
    <logo>https://xiong-zh.github.io/images/avatar.png</logo>
    <icon>https://xiong-zh.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 张雄</rights>
    <entry>
        <title type="html"><![CDATA[个人书籍]]></title>
        <id>https://xiong-zh.github.io/post/ge-ren-shu-ji</id>
        <link href="https://xiong-zh.github.io/post/ge-ren-shu-ji">
        </link>
        <updated>2020-01-19T07:10:35.000Z</updated>
        <summary type="html"><![CDATA[<p>注： 在学习和工作的过程中，遇到一些bug，大佬难寻或一时难已解决，或需求与现状对不上等一系列问题，于是萌生了写一些较完整成体系的文章记录遇到的问题和解决之道的文章。所以一下的书籍就这样出现了。<br>
其中还有非常多的想法还没有实现，或者还没有呈现出来，有许多不完美的地方，在后续会不断实现并加以完善。在这里诚恳的希望读者能提出宝贵的意见和你的期待，你可以通过本博客中留的方式联系到我。</p>
]]></summary>
        <content type="html"><![CDATA[<p>注： 在学习和工作的过程中，遇到一些bug，大佬难寻或一时难已解决，或需求与现状对不上等一系列问题，于是萌生了写一些较完整成体系的文章记录遇到的问题和解决之道的文章。所以一下的书籍就这样出现了。<br>
其中还有非常多的想法还没有实现，或者还没有呈现出来，有许多不完美的地方，在后续会不断实现并加以完善。在这里诚恳的希望读者能提出宝贵的意见和你的期待，你可以通过本博客中留的方式联系到我。</p>
<!-- more -->
<p>注： 在学习和工作的过程中，遇到一些bug，大佬难寻或一时难已解决，或需求与现状对不上等一系列问题，于是萌生了写一些较完整成体系的文章记录遇到的问题和解决之道的文章。所以一下的书籍就这样出现了。<br>
其中还有非常多的想法还没有实现，或者还没有呈现出来，有许多不完美的地方，在后续会不断实现并加以完善。在这里诚恳的希望读者能提出宝贵的意见和你的期待，你可以通过本博客中留的方式联系到我，跪谢🙏。</p>
<h2 id="教程">教程</h2>
<p><a href="https://python.zhangxiong.net">Python</a></p>
<ul>
<li>Python是那些可以声称既简单又强大的罕见语言之一。您会惊喜地发现，专注于问题的解决方案而不是您编程语言的语法和结构是多么容易。</li>
<li>Python是一种简单而简约的语言。阅读一个好的Python程序感觉就像阅读英语，虽然英语非常严格！Python的这种伪代码特性是它最大的优势之一。它允许您专注于问题的解决方案而不是语言本身。</li>
</ul>
<p><a href="https://django.zhangxiong.net">Django</a></p>
<ul>
<li>在我们编写的所有程序中，我们已经围绕函数设计了我们的程序，即操作数据的语句块。这称为面向过程的编程方式。还有另一种组织程序的方法，即组合数据和功能并将其包装在称为对象的内容中。这称为面向对象编程范例。大多数情况下，您可以使用过程编程，但在编写大型程序或遇到更适合此方法的问题时，可以使用面向对象的编程技术。</li>
</ul>
<h2 id="想法">想法</h2>
<p><a href="https://yscg.zhangxiong.net">一切都刚刚好</a></p>
<ul>
<li>其实也过写点东西的冲动，但有时候身边写作条件达不到，又或者思如泉涌，提笔忘字，写出来也不太尽如人意，内心想法表达不出来。同时感觉写了只是自己看， 又或者不自信不愿意分享，常常搁浅。其实许多事都没我们想的那么难，难就难在对未知的恐惧，安于现状，不敢走出舒适圈，只要跨过了，就会成为自然而然对事。</li>
</ul>
<p><a href="https://gqlx.zhangxiong.net">归去来兮</a> 暂未完成</p>
<h3 id="更多作品敬请期待">更多作品敬请期待···</h3>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django urls与视图详解]]></title>
        <id>https://xiong-zh.github.io/post/Django-urls与视图详解</id>
        <link href="https://xiong-zh.github.io/post/Django-urls与视图详解">
        </link>
        <updated>2020-01-18T13:12:17.000Z</updated>
        <summary type="html"><![CDATA[<p>Django urls与视图详解</p>
]]></summary>
        <content type="html"><![CDATA[<p>Django urls与视图详解</p>
<!-- more -->
<h1 id="urls与视图详解"><code>urls</code>与视图详解</h1>
<blockquote>
<p>环境 <code>Windows10</code></p>
</blockquote>
<h2 id="一-准备工作">一、准备工作</h2>
<ul>
<li>
<p>使用 <code>virtualenvwrapper</code> 创建并进入虚拟环境</p>
<pre><code>mkvirtualenv myenv
</code></pre>
</li>
<li>
<p>安装 <code>Django2.0</code></p>
<pre><code>pip install django==2.0
</code></pre>
</li>
<li>
<p>查看是否安装成功</p>
<pre><code>pip list
</code></pre>
</li>
<li>
<p>创建一个名为 <code>mysite</code> 的 <code>django</code> 项目</p>
<pre><code>django-admin startproject mysite
</code></pre>
</li>
<li>
<p>进入虚拟环境所在目录</p>
<pre><code>cdvirtualenv
</code></pre>
</li>
<li>
<p>打开当前目录</p>
<pre><code>start %cd%
</code></pre>
</li>
<li>
<p>将 <code>mysite</code> 目录拖到 <code>pycharm</code> 打开</p>
</li>
<li>
<p>设置 <code>pycharm</code> 的 <code>python</code> 环境</p>
</li>
</ul>
<h2 id="二-项目结构分析">二、项目结构分析</h2>
<ul>
<li>
<p><code>manange.py</code> 项目的管理与交互都基于这个文件， 如启动项目：</p>
<pre><code>python manange.py runserver
</code></pre>
</li>
<li>
<p><code>__init__.py</code> 表示这是一个 <code>python</code> 模块</p>
</li>
<li>
<p><code>setting.py</code> 保存项目的所有配置信息</p>
</li>
<li>
<p><code>urls.py</code> 编写路由与视图的映射规则</p>
</li>
<li>
<p><code>wsig.py</code> 项目部署文件</p>
</li>
</ul>
<h2 id="三-debug-模式-与-allowed_hosts">三、<code>DEBUG</code> 模式  与 <code>ALLOWED_HOSTS</code></h2>
<ul>
<li>在 <code>mysite/settings.py</code> 中 默认是开启了 <code>DEBUG</code> 模式的</li>
</ul>
<pre><code>DEBUG = True
</code></pre>
<ul>
<li>
<p><code>DEBUG</code> 模式的作用</p>
<ul>
<li>修改后自动重启项目</li>
<li>详细的报错详细</li>
</ul>
</li>
<li>
<p>关闭了 <code>DEBUG</code> 模式，必须设置 <code>ALLOWED_HOSTS</code>, 否则项目起不来</p>
</li>
</ul>
<pre><code>ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '192.168.0.108']
</code></pre>
<ul>
<li>
<p><code>DEBUG</code> 模式, 默认是以 <code>IP</code> <code>0.0.0.0</code> 启动服务的， 但只要设置了 <code>ALLOWED_HOSTS</code>， 就只能通过<code>ALLOWED_HOSTS</code> 中的 <code>IP</code> 或 域名进行访问</p>
</li>
<li>
<p>开发阶段，开启 <code>DEBUG</code>, 线上环境必须关闭 <code>DEBUG</code> 模式</p>
</li>
</ul>
<h2 id="四-root_urlconf-设置-urls-匹配的入口文件">四、<code>ROOT_URLCONF</code> 设置 <code>urls</code> 匹配的入口文件</h2>
<pre><code>ROOT_URLCONF = 'mysite.urls'
</code></pre>
<h2 id="五-初识视图函数">五、初识视图函数</h2>
<ul>
<li>视图函数的第一个参数永远是 <code>HttpRequest</code> 对象</li>
<li>视图函数只能返回 <code>HttpResponseBase</code>的子类对象</li>
</ul>
<pre><code>from django.http import HttpResponse
def index(request):
    return HttpResponse('cms首页')
</code></pre>
<h2 id="六-urls-分层模块化">六、<code>urls</code> 分层模块化</h2>
<ul>
<li>
<p>每个独立的模块对应 <code>Django</code> 的一个 <code>app</code></p>
</li>
<li>
<p>创建两个 <code>app</code> : <code>front</code> 和 <code>cms</code></p>
</li>
</ul>
<pre><code>  # 创建前台模块
  python manange.py startapp front

  # 创建后台cms模块
  python manange.py startapp cms
</code></pre>
<ul>
<li>编写 <code>front/views.py</code></li>
</ul>
<pre><code class="language-python"># from django.shortcuts import render
from django.http import HttpResponse
# Create your views here.
def index(request):
   return HttpResponse('前台首页')
</code></pre>
<ul>
<li>编写 <code>cms/views.py</code></li>
</ul>
<pre><code class="language-python">  # from django.shortcuts import render
from django.http import HttpResponse
def index(request):
    return HttpResponse('cms首页')
</code></pre>
<ul>
<li>创建 <code>front/urls.py</code></li>
</ul>
<pre><code class="language-python">from django.urls import path
from . import views
app_name = 'front'
urlpatterns = [
      path('', views.index, name='index')
  ]
</code></pre>
<ul>
<li>创建 <code>cms/urls.py</code></li>
</ul>
<pre><code class="language-python">from django.urls import path
from . import views
app_name = 'cms'
urlpatterns = [
      path('', views.index, name='index')
  ]
</code></pre>
<ul>
<li>编写 <code>mysite/urls.py</code></li>
</ul>
<pre><code class="language-python">from django.contrib import admin
from django.urls import path, include
urlpatterns = [
      path('admin/', admin.site.urls),
      path('', include('front.urls')),
      path('cms/', include('cms.urls')),
  ]
</code></pre>
<ul>
<li>启动项目</li>
</ul>
<pre><code class="language-shell"> python manange.py runserver
</code></pre>
<ul>
<li>
<p>访问 <code>front</code> 应用： <code>http://127.0.0.1:8000</code></p>
</li>
<li>
<p>访问 <code>cms</code> 应用： <code>http://127.0.0.1:8000/cms/</code></p>
</li>
</ul>
<h2 id="七-url中的参数传递">七、<code>url</code>中的参数传递</h2>
<ul>
<li>通过 <code>path</code> 传递</li>
<li>编写视图函数 <code>front/views.py</code></li>
</ul>
<pre><code class="language-python">def detail(request, article_id):
    return HttpResponse('当前文章id: %s' % article_id)
</code></pre>
<ul>
<li>编写urls <code>front/urls.py</code></li>
</ul>
<pre><code class="language-python">path('detail/&lt;article_id&gt;', views.detail, name='detail'),
</code></pre>
<ul>
<li>
<p>访问方式： <code>http://localhost:8000/detail/1</code></p>
</li>
<li>
<p>通过 查询字符串 传递</p>
</li>
<li>
<p>编写视图函数 <code>front/views.py</code></p>
</li>
</ul>
<pre><code class="language-python">def article_list(request):
    author = request.GET.get('author')
    return HttpResponse('%s 相关的文章' % author)
</code></pre>
<ul>
<li>
<p>编写urls <code>front/urls.py</code></p>
<pre><code class="language-python">path('list/', views.article_list, name='list'),
</code></pre>
</li>
<li>
<p>访问方式： <code>http://localhost:8000/list/?author=%E6%9D%8E%E7%99%BD</code></p>
</li>
</ul>
<h2 id="八-内置的-path-转换器">八、 内置的 <code>path</code> 转换器</h2>
<ul>
<li><code>int</code> 类型：
<ul>
<li>
<p>实现原理如下</p>
<pre><code class="language-python">class IntConverter:
  regex = '[0-9]+'

  def to_python(self, value):
      return int(value)

  def to_url(self, value):
      return str(value)
</code></pre>
</li>
<li>
<p>改写 <code>front/urls.py</code></p>
<pre><code class="language-python">path('detail/&lt;int:article_id&gt;', views.detail, name='detail'),
</code></pre>
</li>
<li>
<p>改写  <code>front/views.py</code></p>
</li>
</ul>
</li>
</ul>
<pre><code class="language-python">def detail(request, article_id):
    print(type(article_id))
    return HttpResponse('当前文章id: %s' % article_id)
</code></pre>
<ul>
<li>
<p>访问： <strong>http://localhost:8000/detail/1</strong></p>
</li>
<li>
<p>控制台输出 <code>&lt;class 'int'&gt;</code></p>
</li>
<li>
<p><code>str</code> 类型， 默认不指定类型，就是 <code>str</code> 类型</p>
<ul>
<li>原理：</li>
</ul>
</li>
</ul>
<pre><code class="language-python">class StringConverter:
    regex = '[^/]+'
    def to_python(self, value):
        return value
    def to_url(self, value):
        return value
</code></pre>
<ul>
<li><code>uuid</code> 类型，通用唯一识别码
<ul>
<li>原理：</li>
</ul>
</li>
</ul>
<pre><code class="language-python">class UUIDConverter:
    regex = '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
    def to_python(self, value):
        return uuid.UUID(value)
    def to_url(self, value):
        return str(value)
</code></pre>
<ul>
<li>
<p>生成一个<code>uuid</code> 如： <code>b8f12562-7006-4e21-9aeb-c3426d9dcbd3</code></p>
<pre><code class="language-shell">python

import uuid

uuid.uuid4()
</code></pre>
</li>
<li>
<p>改写 <code>front/urls.py</code></p>
<pre><code class="language-python">path('detail/&lt;uuid:article_id&gt;', views.detail, name='detail'),
</code></pre>
</li>
<li>
<p>访问： <code>http://localhost:8000/detail/b8f12562-7006-4e21-9aeb-c3426d9dcbd3</code></p>
</li>
<li>
<p><code>slug</code> 类型</p>
<ul>
<li>原理：</li>
</ul>
</li>
</ul>
<pre><code class="language-python">regex = '[-a-zA-Z0-9_]+'
</code></pre>
<ul>
<li><code>path</code> 类型</li>
<li>原理：</li>
</ul>
<pre><code class="language-python">regex = '.+'
</code></pre>
<h2 id="九-自定义-path-转换器">九、自定义 <code>path</code> 转换器</h2>
<p><strong>这里，我们实现一个规则为： python+django+flask 的 <code>url</code> 参数， <code>python</code> 代码接收到的是通过 <code>+</code> 拆分后的列表, 转换器接收的参数也必须是一个列表； 比较抽象，还是看代码吧！</strong></p>
<ul>
<li>创建 <code>front/converters.py</code></li>
</ul>
<pre><code>from django.urls import register_converter
class CateConverter:
      regex = r'\w+|(\w+\+\w+)+'
      def to_python(self, value):
          return value.split('+')
      def to_url(self, value):
          if isinstance(value, list):
              return '+'.join(value)
          else:
              raise RuntimeError('分类参数必须为 list 类型')
# 注册 path 转换器
    register_converter(CateConverter, 'cate')
</code></pre>
<ul>
<li>修改 <code>front/__init__.py</code></li>
</ul>
<pre><code class="language-python"># 运行我们自定义的转换器
from . import converters
</code></pre>
<ul>
<li>修改 <code>front/urls.py</code></li>
</ul>
<pre><code class="language-python">path('category/&lt;cate:category&gt;/', views.index_category, name='category'),
</code></pre>
<ul>
<li>修改 <code>front/views.py</code></li>
</ul>
<pre><code>def index_category(request, category):
    pathname = reverse('front:category', kwargs={'category': category})
    return HttpResponse('分类列表为： %s, url 的 pathname 部分为： %s' % (category, pathname))
</code></pre>
<ul>
<li>访问： <code>http://localhost:8000/category/python+django/</code>, 浏览器显示如下：</li>
</ul>
<p><code>分类列表为： ['python', 'django'], url 的 pathname 部分为： /category/python+django/</code></p>
<h2 id="十-重定向-与-url-命名反转">十、重定向 与 <code>url</code> 命名反转</h2>
<blockquote>
<p>通过模拟 <code>cms</code> 后台登录进行讲解</p>
</blockquote>
<ul>
<li>修改 <code>cms/urls.py</code></li>
</ul>
<pre><code class="language-python">path('login/', views.login, name='login'),
</code></pre>
<ul>
<li>修改 <code>cms/views.py</code></li>
</ul>
<pre><code>  # from django.shortcuts import render
  from django.http import HttpResponse
  from django.shortcuts import redirect, reverse

  # Create your views here.


  def index(request):
      username = request.GET.get('username')
      if username:
          return HttpResponse('cms首页')
      else:
          # 重定向登录页面
          return redirect(reverse('cms:login'))  # url 命名反转


  def login(request):
      return HttpResponse('登录页面')

</code></pre>
<ul>
<li>
<p>访问： <code>http://localhost:8000/cms/</code> 会自动跳转到登录页面</p>
</li>
<li>
<p>访问： <code>http://localhost:8000/cms/?username=zhb33</code> 才能访问 <code>cms</code> 后台首页</p>
</li>
<li>
<p><code>url</code> 命名反转时的参数传递</p>
<blockquote>
<p>如果反转时，<code>url</code> 需要接收参数， 可通过关键字参数传递， 如果传递的查询字符串， 需要手动进行拼接</p>
</blockquote>
<ul>
<li>修改 <code>cms/urls.py</code></li>
</ul>
</li>
</ul>
<pre><code>  path('login/&lt;location&gt;', views.login, name='login'),
</code></pre>
<ul>
<li>修改 <code>cms/views.py</code></li>
</ul>
<pre><code>  def index(request):
    username = request.GET.get('username')
    if username:
        return HttpResponse('cms首页')
    else:
        # 重定向登录页面
        login_url = reverse('cms:login', kwargs={'location': '深圳'})  # url传参
        login_url += '?next=/'  # 查询字符串
        return redirect(login_url)  # url 命名反转


  def login(request, location):
      return HttpResponse('登录页面, 登录地点是 %s' % location)
</code></pre>
<ul>
<li><code>http://localhost:8000/cms/</code> 跳转到 <code>http://localhost:8000/cms/login/深圳?next=/</code></li>
</ul>
<h2 id="十一-urls的-应用命名空间-与-实例命名空间">十一、 <code>urls</code>的 应用命名空间 与 实例命名空间</h2>
<ul>
<li>应用命名空间
<ul>
<li>可以在每个应用的 <code>urls.py</code> 通过 <code>app_name</code> 进行设置 (一般使用这种方式设置)</li>
</ul>
</li>
</ul>
<pre><code>app_name = 'cms'
</code></pre>
<ul>
<li>也可以在 <code>ROOT_URLCONF</code> 指定的 <code>urls.py</code> 中使用 <code>include</code> 时进行设置(不常用)</li>
</ul>
<pre><code>    # mysite/urls.py
    path('cms/', include(('cms.urls', 'cms'))),  # 引入 cms 模块的 urls.py 并设置应用命名空间 为 cms
</code></pre>
<ul>
<li>
<p>作用： 如上面的 <code>url</code> 命名反转时 <code>reverse('cms:login')</code>, 可以防止与其它应用的 <code>url</code> 命名冲突</p>
</li>
<li>
<p>实例命名空间</p>
<ul>
<li>在通过 <code>include</code> 引用时，进行设置</li>
</ul>
</li>
</ul>
<pre><code>    # 设置实例命名空间
    path('cms/', include('cms.urls', namespace='cms')),

    # 同时设置 应用命名空间 和 实例命名空间
    path('cms/', include(('cms.urls', 'cms'), namespace='cms')),
</code></pre>
<ul>
<li>
<p>作用： 当多个不同 <code>url</code> 指向同一个应用时， 防止 <code>url</code> 冲突</p>
<p><strong>不使用实例命名空间的情况</strong></p>
<ul>
<li>修改<code>mysite/urls.py</code></li>
</ul>
</li>
</ul>
<pre><code>      path('cms1/', include('cms.urls')),  # 不同的 url 指向同一个 应用
      path('cms2/', include('cms.urls')),
</code></pre>
<pre><code>* 访问 `http://localhost:8000/cms1/` 跳转到 `http://localhost:8000/cms1/login/深圳?next=/`  
* 访问 `http://localhost:8000/cms2/` 也跳转到 `http://localhost:8000/cms1/login/深圳?next=/`  

**冲突了吧！**

**使用实例命名空间**

* 修改`mysite/urls.py`
</code></pre>
<pre><code>    path('cms1/', include('cms.urls', namespace='cms1')),
    path('cms2/', include('cms.urls', namespace='cms2')),
</code></pre>
<pre><code>* 修改`mysite/views.py`
</code></pre>
<pre><code>def index(request):
      username = request.GET.get('username')
      if username:
          return HttpResponse('cms首页')
      else:
          # 重定向登录页面
          current_namespace = request.resolver_match.namespace
          login_url = reverse('%s:login' % current_namespace, kwargs={'location': '深圳'})  # url传参
          login_url += '?next=/'  # 查询字符串
          return redirect(login_url)  # url 命名反转
</code></pre>
<pre><code>* 访问 `http://localhost:8000/cms1/` 跳转到 `http://localhost:8000/cms1/login/深圳?next=/`  
* 访问 `http://localhost:8000/cms2/` 跳转到 `http://localhost:8000/cms2/login/深圳?next=/`
</code></pre>
<h2 id="十二-re_path-函数">十二、 <code>re_path</code> 函数</h2>
<blockquote>
<p>通过正则进行匹配参数</p>
</blockquote>
<p><strong>匹配生日</strong></p>
<ul>
<li>修改 <code>front/urls.py</code></li>
</ul>
<pre><code>  from django.urls import path, re_path
  from . import views

  app_name = 'front'

  urlpatterns = [
      path('', views.index, name='index'),
      # ?P&lt;birthday&gt; 表示参数为 birthday 匹配 \d{4}-\d{2}-\d{2}
      re_path(r'^birthday/(?P&lt;birthday&gt;\d{4}-\d{2}-\d{2})/$', views.index_birthday, name='birthday')
  ]
</code></pre>
<ul>
<li>修改 <code>front/views.py</code></li>
</ul>
<pre><code>  def index_birthday(request, birthday):
    return HttpResponse('生日快乐 %s' % birthday)
</code></pre>
<ul>
<li>
<p>访问： <code>http://localhost:8000/birthday/1992-12-28/</code></p>
</li>
<li>
<p>能用 <code>path</code> 解决的问题， 尽量不要用 <code>re_path</code> 因为 <code>re_path</code> 可读性差</p>
</li>
</ul>
<h2 id="十三-默认参数">十三、默认参数</h2>
<p><strong>要实现默认参数，需要两条 <code>url</code> 的配合</strong></p>
<ul>
<li>修改 <code>front/urls.py</code></li>
</ul>
<pre><code> from django.urls import path, re_path
 from . import views

 app_name = 'front'

 urlpatterns = [
     path('', views.index_list, name='index'),
     path('list/&lt;int:category_id&gt;', views.index_list, name='list'),
 ]
</code></pre>
<ul>
<li>修改 <code>front/views.py</code></li>
</ul>
<pre><code class="language-python">from django.http import HttpResponse
category = ['python', 'django', 'flask']

def index_list(request, category_id=0):
      return HttpResponse(category[category_id])
</code></pre>
<ul>
<li>
<p>访问： <code>http://localhost:8000</code>, 显示:<br>
<code>python</code></p>
</li>
<li>
<p>访问： <code>http://localhost:8000/list/2</code>, 显示：<br>
<code>flask</code></p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django模板中加载静态文件]]></title>
        <id>https://xiong-zh.github.io/post/Django模板中加载静态文件</id>
        <link href="https://xiong-zh.github.io/post/Django模板中加载静态文件">
        </link>
        <updated>2020-01-18T13:11:05.000Z</updated>
        <summary type="html"><![CDATA[<p>Django模板中加载静态文件</p>
]]></summary>
        <content type="html"><![CDATA[<p>Django模板中加载静态文件</p>
<!-- more -->
<h1 id="模板中加载静态文件">模板中加载静态文件</h1>
<blockquote>
<p>接着 <a href="https://zhb333.github.io/readme-blog/Python/Django/templates_4.html">模板结构优化</a> 往下讲</p>
</blockquote>
<ul>
<li>
<p>确保<code>mysite/setting.py</code> 中 <code>INSTALLED_APPS</code> 已经安装了 <code>django.contrib.staticfiles</code></p>
</li>
<li>
<p>确保 <code>mysite/setting.py</code> 中设置了 <code>STATIC_URL</code></p>
</li>
<li>
<p>在已经安装的 <code>app</code> 下创建 <code>static</code> 文件夹，并将该应用的静态资源存放在里面 : <code>front/static/suolong.jpg</code></p>
<p><code>templates/index.html</code></p>
</li>
</ul>
<pre><code class="language-html">  {% block content %}
      &lt;img src=&quot;/static/suolong.jpg&quot; alt=&quot;suolong&quot;&gt;
  {% endblock %}
</code></pre>
<ul>
<li>
<p><code>mysite/setting.py</code> 中 <code>STATIC_URL</code> 值是可变的，这样以后引用静态资源的路径都要根据 <code>STATIC_URL</code> 是新值去修改，因此我们需要使用 <code>{% load static %}</code></p>
<p><code>templates/index.html</code></p>
</li>
</ul>
<pre><code>  {% extends 'base.html' %}
  {% load static %}

  {% block content %}
      &lt;img src=&quot;{% static 'suolong.jpg' %}&quot; alt=&quot;suolong&quot;&gt;
  {% endblock %}
</code></pre>
<ul>
<li>
<p>公共资源路径</p>
<p>在更目录下创建 <code>static</code> 文件夹</p>
<p><code>static/style.css</code></p>
</li>
</ul>
<pre><code>  body {
      background-color: #abcdef;
  }
</code></pre>
<p><code>mysite/setting.py</code></p>
<pre><code>  STATICFILES_DIRS = (
      os.path.join(BASE_DIR, 'static'),
  )
</code></pre>
<p><code>mysite/base.html</code></p>
<pre><code>  {% load static %}
  &lt;!DOCTYPE html&gt;
  &lt;html lang=&quot;en&quot;&gt;
  &lt;head&gt;
      &lt;meta charset=&quot;UTF-8&quot;&gt;
      &lt;title&gt;Title&lt;/title&gt;
      &lt;link rel=&quot;stylesheet&quot; href=&quot;{% static 'style.css' %}&quot;&gt;
  &lt;/head&gt;
</code></pre>
<ul>
<li>
<p>在每个需要加载静态资源文件的模板中都要写 <code>{% load static %}</code>, 为了不在每个模板中都写，我们可以吧 <code>static</code> 变为 <code>DTL</code> 模板标签</p>
<p><code>mysite/setting.py</code></p>
</li>
</ul>
<pre><code>  TEMPLATES = [
      {
        'OPTIONS': {
            'builtins': [
                'django.templatetags.static'
            ]
        },
      },
  ]
</code></pre>
<p><strong>这样就不用在每个页面中引入<code>{% load static %}</code></strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django模板结构优化]]></title>
        <id>https://xiong-zh.github.io/post/Django模板结构优化</id>
        <link href="https://xiong-zh.github.io/post/Django模板结构优化">
        </link>
        <updated>2020-01-18T13:09:55.000Z</updated>
        <summary type="html"><![CDATA[<p>Django模板结构优化</p>
]]></summary>
        <content type="html"><![CDATA[<p>Django模板结构优化</p>
<!-- more -->
<h1 id="dtl-模板结构优化"><code>DTL</code> 模板结构优化</h1>
<h2 id="一-引入模板">一、引入模板</h2>
<h3 id="include-标签的使用"><code>include</code> 标签的使用</h3>
<ul>
<li>
<p>新建 <code>templates/header.html</code></p>
<pre><code>&lt;header&gt;头部&lt;/header&gt;
</code></pre>
</li>
<li>
<p>新建 <code>templates/footer.html</code></p>
<pre><code>&lt;footer&gt;尾部&lt;/footer&gt;
</code></pre>
</li>
<li>
<p>修改 <code>templates/index.html</code></p>
</li>
</ul>
<pre><code>    &lt;body&gt;
    {% include 'header.html' %}
    &lt;div&gt;内容&lt;/div&gt;
    {% include 'footer.html' %}
    &lt;/body&gt;
</code></pre>
<h3 id="include-标签中的模板查找路径"><code>include</code> 标签中的模板查找路径</h3>
<p><strong>参照 <a href="http://localhost:8080/readme-blog/Python/Django/templates_1.html#%E4%B8%80%E3%80%81%E6%A8%A1%E6%9D%BF%E6%9F%A5%E6%89%BE%E8%B7%AF%E5%BE%84">render_to_string的模板查找路径</a></strong></p>
<h3 id="include-标签引入的模板可以引用当前模板中的变量"><code>include</code> 标签引入的模板可以引用当前模板中的变量</h3>
<ul>
<li>修改 <code>front/views.py</code></li>
</ul>
<pre><code>    def index(request):
        context = {
            'title': 'Django'
        }
        return render(request, 'index.html', context=context)
</code></pre>
<ul>
<li>
<p>修改 <code>templates/header.html</code></p>
<pre><code>{#头部 Django#}
&lt;header&gt;头部 {{ title }}&lt;/header&gt;
</code></pre>
</li>
<li>
<p>但为了所有引用 <code>templates/header.html</code> 的模板都能使用 <code>title</code> 变量， 可以在 <code>include</code> 标签中传递该变量</p>
<p>修改 <code>templates/index.html</code></p>
<pre><code>{#头部 Young and Beautiful#}
{% include 'header.html' with title='Young and Beautiful' %}
</code></pre>
</li>
</ul>
<h2 id="二-模板继承">二、模板继承</h2>
<ul>
<li>新建 <code>templates/base.html</code>：</li>
</ul>
<pre><code>    &lt;body&gt;
    {% include 'header.html' with title='Young and Beautiful' %}
    &lt;div&gt;
        {% block content %}
            默认内容
        {% endblock %}
    &lt;/div&gt;
    {% include 'footer.html' %}
    &lt;/body&gt;
</code></pre>
<ul>
<li>修改 <code>templates/index.html</code>:</li>
</ul>
<pre><code>    {% extends 'base.html' %}

    {% block content %}
    首页中的内容
    {% endblock %}
</code></pre>
<ul>
<li>
<p>访问 <code>block</code> 标签被覆盖的内容：</p>
<p><code>templates/index.html</code>:</p>
</li>
</ul>
<pre><code>    {% extends 'base.html' %}

    {% block content %}
    首页中的内容
    &lt;p&gt;{{ block.super }}&lt;/p&gt;
    {% endblock %}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django自定义模板过滤器]]></title>
        <id>https://xiong-zh.github.io/post/Django自定义模板过滤器</id>
        <link href="https://xiong-zh.github.io/post/Django自定义模板过滤器">
        </link>
        <updated>2020-01-18T13:08:18.000Z</updated>
        <summary type="html"><![CDATA[<p>Django自定义模板过滤器</p>
]]></summary>
        <content type="html"><![CDATA[<p>Django自定义模板过滤器</p>
<!-- more -->
<h1 id="dtl-自定义模板过滤器"><code>DTL</code> 自定义模板过滤器</h1>
<h2 id="一-模板过滤器的定义">一、模板过滤器的定义</h2>
<ul>
<li>
<p>在应用的目录下，如 <code>front</code> 下， 新建一个名为： <code>templatetags</code> 的 <code>python</code> 包</p>
</li>
<li>
<p>新建 <code>front/templatetags/custom_filter.py</code>, 并定义两个模板过滤器如下：</p>
</li>
</ul>
<pre><code>  from django import template

  register = template.Library()


  def my_add(value, arg):
      try:
          return value + arg
      except (Exception,):
          return ''


  def my_upper(value):
      try:
          return value.upper()
      except (Exception,):
          return value


  register.filter('my_add', my_add)
  register.filter('my_upper', my_upper)
</code></pre>
<ul>
<li>
<p>需要使用 <code>{% load custom_filter %}</code>, 把应用下定义模板过滤器的文件导入模板</p>
</li>
<li>
<p><code>templates/index.html</code> 代码修改如下：</p>
</li>
</ul>
<pre><code>  {% load custom_filter %}
  &lt;!DOCTYPE html&gt;
  &lt;html lang=&quot;en&quot;&gt;
  &lt;head&gt;
      &lt;meta charset=&quot;UTF-8&quot;&gt;
      &lt;title&gt;Title&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
  {#abcdef#}
  {{ &quot;abc&quot;|my_add:&quot;def&quot; }} &lt;br&gt;
  {#HELLO#}
  {{ &quot;hello&quot;|my_upper }}
  &lt;/body&gt;
  &lt;/html&gt;
</code></pre>
<ul>
<li>*<em>注意，<code>front</code> 应用必须在 <code>mysite/settings.py</code> 进行注册，在 <code>front</code> 下定义的模板过滤器才能起作用</em></li>
</ul>
<pre><code>  INSTALLED_APPS = [
      'front',
  ]
</code></pre>
<h2 id="二-实战-自定义时间计算过滤器">二、实战--自定义时间计算过滤器</h2>
<p><code>front/templatetags/custom_filter.py</code></p>
<pre><code>from django import template
from datetime import datetime

register = template.Library()


@register.filter
def time_since(value):
    &quot;&quot;&quot;
    time距离现在的时间间隔
    1 如果时间间隔小于1分钟，那么显示 刚刚
    2 如果时间间隔大于1分钟小于1小时， 那么显示 xx 分钟前
    3 如果是大于1小时小于24小时，那么显示 xx 小时前
    4 如果大于24小时，小于30天， 那么显示 xx 天前
    5 否则显示具体时间， 2018/12/10 23:05
    &quot;&quot;&quot;
    if not isinstance(value, datetime):
        return value
    now = datetime.now()
    timestamp = (now - value).total_seconds()
    if timestamp &lt; 60:
        return '刚刚'
    elif 60 &lt;= timestamp &lt; 60 * 60:
        minutes = int(timestamp/60)
        return '%s分钟前' % minutes
    elif 60 * 60 &lt;= timestamp &lt; 60 * 60 * 24:
        hour = int(timestamp / (60 * 60))
        return '%s 小时前' % hour
    elif 60 * 60 * 24 &lt;= timestamp &lt; 60 * 60 * 24 * 30:
        days = int(timestamp / (60 * 60 * 24))
        return '%s 天前' % days
    else:
        return value.strftime(&quot;%Y/%m/%d %H:%M&quot;)
</code></pre>
<p><code>front/views.py</code></p>
<pre><code>from django.shortcuts import render
from datetime import datetime


def index(request):
    context = {
        'my_time_1': datetime.now(),
        'my_time_2': datetime(year=2018, month=12, day=10, hour=23, minute=18),
        'my_time_3': datetime(year=2018, month=12, day=10, hour=18, minute=18),
        'my_time_4': datetime(year=2018, month=12, day=1, hour=22, minute=18),
        'my_time_5': datetime(year=2017, month=12, day=10, hour=23, minute=18),
    }
    return render(request, 'index.html', context=context)
</code></pre>
<p><code>templates/index.html</code></p>
<pre><code>{% load custom_filter %}
&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;Title&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
{#刚刚 #}
{{ my_time_1|time_since }} &lt;br&gt;
{#7分钟前 #}
{{ my_time_2|time_since }} &lt;br&gt;
{#5 小时前 #}
{{ my_time_3|time_since }} &lt;br&gt;
{#9 天前 #}
{{ my_time_4|time_since }} &lt;br&gt;
{#2017/12/10 23:18#}
{{ my_time_5|time_since }}
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django模板过滤器详解]]></title>
        <id>https://xiong-zh.github.io/post/Django模板过滤器详解</id>
        <link href="https://xiong-zh.github.io/post/Django模板过滤器详解">
        </link>
        <updated>2020-01-18T13:06:44.000Z</updated>
        <summary type="html"><![CDATA[<p>Django模板过滤器详解</p>
]]></summary>
        <content type="html"><![CDATA[<p>Django模板过滤器详解</p>
<!-- more -->
<h1 id="dtl-模板过滤器"><code>DTL</code> 模板过滤器</h1>
<h2 id="add"><code>add</code></h2>
<ul>
<li>原理：</li>
</ul>
<pre><code>  def add(value, arg):
    &quot;&quot;&quot;Add the arg to the value&quot;&quot;&quot;
    try:
      return int(value) + int(arg)
    except (ValueError, TypeError):
      try:
        return value + arg
      except Exception:
        return ''
</code></pre>
<ul>
<li>使用<br>
<code>front/views.py</code></li>
</ul>
<pre><code>  def index(request):
    context = {
        &quot;number&quot;: 1,
        &quot;persons&quot;: ['baby', 'dear'],
        &quot;girls&quot;: ['宝宝', '亲爱的']
    }
    return render(request, 'index.html', context=context)
</code></pre>
<p><code>templates/index.html</code></p>
<pre><code>{#数字相加#}
{{ number|add:&quot;2&quot; }} &lt;br&gt;
{#字符串拼接#}
{{ number|add:'abc' }} &lt;br&gt;
{#列表拼接#}
{{ persons|add:girls }}
</code></pre>
<h2 id="cut"><code>cut</code></h2>
<ul>
<li>
<p>原理：</p>
<pre><code>def cut(vaule, arg):
  &quot;&quot;&quot;Remove all values of arg from the given string&quot;&quot;&quot;
  safe = isinstance(value, SafeData)
  value = value.replace(arg, '')
  if safe and arg != ';':
    return mark_safe(value)
  return value
</code></pre>
</li>
<li>
<p>使用<br>
<code>templates/index.html</code></p>
<pre><code>{# 去除字符串中空格 #}
{{ &quot;This is ten percent luck, twenty percent skill&quot;|cut:&quot; &quot; }}
</code></pre>
</li>
</ul>
<h2 id="date"><code>date</code></h2>
<ul>
<li>
<p>所有格式</p>
<table>
<thead>
<tr>
<th style="text-align:center">格式字符</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">示例输出</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">a</td>
<td style="text-align:center">'a.m.' 或 'p.m.' （请注意，这与PHP输出略有不同，因为这包括与Associated Press样式匹配的句点。）</td>
<td style="text-align:center">'a.m.'</td>
</tr>
<tr>
<td style="text-align:center">A</td>
<td style="text-align:center">'AM' 或 'PM'。</td>
<td style="text-align:center">'a.m.'</td>
</tr>
<tr>
<td style="text-align:center">b</td>
<td style="text-align:center">月，文字，3个字母，小写。</td>
<td style="text-align:center">'jan'</td>
</tr>
<tr>
<td style="text-align:center">B</td>
<td style="text-align:center">未实现。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">c</td>
<td style="text-align:center">ISO 8601格式。 （注意：与其他格式化程序，如“Z”，“O”或“r”不同，如果值是一个天真的datetime（见 datetime.tzinfo），“c”格式化程序不会添加时区偏移。</td>
<td style="text-align:center">2008-01-02T10:30:00.000123+02:00 或 2008-01-02T10:30:00.000123 （如果datetime是天真的）</td>
</tr>
<tr>
<td style="text-align:center">d</td>
<td style="text-align:center">月的日期，带前导零的2位数字。</td>
<td style="text-align:center">'01' 到 '31'</td>
</tr>
<tr>
<td style="text-align:center">D</td>
<td style="text-align:center">星期几，文字，3个字母。</td>
<td style="text-align:center">'Fri'</td>
</tr>
<tr>
<td style="text-align:center">e</td>
<td style="text-align:center">时区名称。可以是任何格式，或可能返回一个空字符串，具体取决于datetime。</td>
<td style="text-align:center">''，'GMT'，'-500'，'US/Eastern' 等。</td>
</tr>
<tr>
<td style="text-align:center">E</td>
<td style="text-align:center">月，特定于语言环境的替代表示，通常用于长日期表示。</td>
<td style="text-align:center">'listopada' （对于波兰语区域，而不是 'Listopad'）</td>
</tr>
<tr>
<td style="text-align:center">f</td>
<td style="text-align:center">时间，12小时小时和分钟，如果他们为零，分钟将关闭。专有扩展。</td>
<td style="text-align:center">'1'，'1:30'</td>
</tr>
<tr>
<td style="text-align:center">F</td>
<td style="text-align:center">月，文字，长。</td>
<td style="text-align:center">'January'</td>
</tr>
<tr>
<td style="text-align:center">g</td>
<td style="text-align:center">小时，12小时格式，不含前导零。</td>
<td style="text-align:center">'1' 到 '12'</td>
</tr>
<tr>
<td style="text-align:center">G</td>
<td style="text-align:center">小时，24小时格式，无前导零。</td>
<td style="text-align:center">'0' 到 '23'</td>
</tr>
<tr>
<td style="text-align:center">h</td>
<td style="text-align:center">小时，12小时格式。</td>
<td style="text-align:center">'01' 到 '12'</td>
</tr>
<tr>
<td style="text-align:center">H</td>
<td style="text-align:center">小时，24小时格式。</td>
<td style="text-align:center">'00' 到 '23'</td>
</tr>
<tr>
<td style="text-align:center">i</td>
<td style="text-align:center">分钟。</td>
<td style="text-align:center">'00' 到 '59'</td>
</tr>
<tr>
<td style="text-align:center">I</td>
<td style="text-align:center">夏令时，无论是否生效。</td>
<td style="text-align:center">'1' 或 '0'</td>
</tr>
<tr>
<td style="text-align:center">j</td>
<td style="text-align:center">没有前导零的月份日。</td>
<td style="text-align:center">'1' 到 '31'</td>
</tr>
<tr>
<td style="text-align:center">l</td>
<td style="text-align:center">星期几，文字，长。</td>
<td style="text-align:center">'Friday'</td>
</tr>
<tr>
<td style="text-align:center">L</td>
<td style="text-align:center">是否为闰年的布尔值。</td>
<td style="text-align:center">True 或 False</td>
</tr>
<tr>
<td style="text-align:center">m</td>
<td style="text-align:center">月，2位数字，前导零。</td>
<td style="text-align:center">'01' 到 '12'</td>
</tr>
<tr>
<td style="text-align:center">M</td>
<td style="text-align:center">月，文字，3个字母。</td>
<td style="text-align:center">'Jan'</td>
</tr>
<tr>
<td style="text-align:center">n</td>
<td style="text-align:center">没有前导零的月。</td>
<td style="text-align:center">'1' 到 '12'</td>
</tr>
<tr>
<td style="text-align:center">N</td>
<td style="text-align:center">月缩写在Associated Press风格。专有扩展。</td>
<td style="text-align:center">'Jan.'，'Feb.'，'March'，'May'</td>
</tr>
<tr>
<td style="text-align:center">o</td>
<td style="text-align:center">ISO-8601周编号年，对应于使用闰年的ISO-8601周编号（W）。更常见的年份格式见Y。</td>
<td style="text-align:center">'1999'</td>
</tr>
<tr>
<td style="text-align:center">O</td>
<td style="text-align:center">与格林威治时间的差值（以小时为单位）。</td>
<td style="text-align:center">'+0200'</td>
</tr>
<tr>
<td style="text-align:center">P</td>
<td style="text-align:center">时间，12小时制，分钟和’a.m。’/’p.m。’，如果它们为零，分钟将关闭，如果合适，分钟将保留特殊字符串’午夜’和’中午’。专</td>
<td style="text-align:center">有扩展。 '1 a.m.'，'1:30 p.m.'，'midnight'，'noon'，'12:30 p.m.'</td>
</tr>
<tr>
<td style="text-align:center">r</td>
<td style="text-align:center">RFC 5322 格式的日期。</td>
<td style="text-align:center">'Thu, 21 Dec 2000 16:01:07 +0200'</td>
</tr>
<tr>
<td style="text-align:center">s</td>
<td style="text-align:center">秒，带前导零的2位数。</td>
<td style="text-align:center">'00' 到 '59'</td>
</tr>
<tr>
<td style="text-align:center">S</td>
<td style="text-align:center">每月日期的英文序数后缀，2个字符。</td>
<td style="text-align:center">'st'，'nd'，'rd' 或 'th'</td>
</tr>
<tr>
<td style="text-align:center">t</td>
<td style="text-align:center">指定月份的天数。</td>
<td style="text-align:center">28 到 31</td>
</tr>
<tr>
<td style="text-align:center">T</td>
<td style="text-align:center">本机的时区。</td>
<td style="text-align:center">'EST'，'MDT'</td>
</tr>
<tr>
<td style="text-align:center">u</td>
<td style="text-align:center">微秒。</td>
<td style="text-align:center">000000 到 999999</td>
</tr>
<tr>
<td style="text-align:center">U</td>
<td style="text-align:center">自Unix时代以来的秒数（1970年1月1日00:00:00 UTC）。</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">w</td>
<td style="text-align:center">星期几，没有前导零的数字。</td>
<td style="text-align:center">'0' （星期日）至 '6' （星六）</td>
</tr>
<tr>
<td style="text-align:center">W</td>
<td style="text-align:center">ISO-8601年的周数，周从星期一开始。</td>
<td style="text-align:center">1，53</td>
</tr>
<tr>
<td style="text-align:center">y</td>
<td style="text-align:center">年，2位数。</td>
<td style="text-align:center">'99'</td>
</tr>
<tr>
<td style="text-align:center">Y</td>
<td style="text-align:center">年，4位数。</td>
<td style="text-align:center">'1999'</td>
</tr>
<tr>
<td style="text-align:center">z</td>
<td style="text-align:center">一年中的一天。</td>
<td style="text-align:center">0 到 365</td>
</tr>
<tr>
<td style="text-align:center">Z</td>
<td style="text-align:center">时区偏移（以秒为单位）。 UTC之前的时区的偏移总是负的，并且对于UTC的东部的偏移总是正的。</td>
<td style="text-align:center">-43200 到 43200</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>常用格式</p>
<table>
<thead>
<tr>
<th style="text-align:center">格式字符</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">示例输出</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Y</td>
<td style="text-align:center">年，4位数。</td>
<td style="text-align:center">'1999'</td>
</tr>
<tr>
<td style="text-align:center">m</td>
<td style="text-align:center">月，2位数字，前导零。</td>
<td style="text-align:center">'01' 到 '12'</td>
</tr>
<tr>
<td style="text-align:center">n</td>
<td style="text-align:center">没有前导零的月。</td>
<td style="text-align:center">'1' 到 '12'</td>
</tr>
<tr>
<td style="text-align:center">d</td>
<td style="text-align:center">月的日期，带前导零的2位数字。</td>
<td style="text-align:center">'01' 到 '31'</td>
</tr>
<tr>
<td style="text-align:center">j</td>
<td style="text-align:center">没有前导零的月份日。</td>
<td style="text-align:center">'1' 到 '31'</td>
</tr>
<tr>
<td style="text-align:center">g</td>
<td style="text-align:center">小时，12小时格式，不含前导零。</td>
<td style="text-align:center">'1' 到 '12'</td>
</tr>
<tr>
<td style="text-align:center">h</td>
<td style="text-align:center">小时，12小时格式。</td>
<td style="text-align:center">'01' 到 '12'</td>
</tr>
<tr>
<td style="text-align:center">G</td>
<td style="text-align:center">小时，24小时格式，无前导零。</td>
<td style="text-align:center">'0' 到 '23'</td>
</tr>
<tr>
<td style="text-align:center">H</td>
<td style="text-align:center">小时，24小时格式。</td>
<td style="text-align:center">'00' 到 '23'</td>
</tr>
<tr>
<td style="text-align:center">i</td>
<td style="text-align:center">分钟。</td>
<td style="text-align:center">'00' 到 '59'</td>
</tr>
<tr>
<td style="text-align:center">s</td>
<td style="text-align:center">秒，带前导零的2位数。</td>
<td style="text-align:center">'00' 到 '59'</td>
</tr>
</tbody>
</table>
</li>
</ul>
<p><code>front/views.py</code></p>
<pre><code>from django.shortcuts import render
from datetime import datetime


def index(request):
    context = {
        &quot;today&quot;: datetime.now()
    }
    return render(request, 'index.html', context=context)
</code></pre>
<p><code>templates/index.html</code></p>
<pre><code>{# 2018/12/09 #}
{{ today|date:&quot;Y/m/d&quot; }}
</code></pre>
<h2 id="default"><code>default</code></h2>
<p><code>front/views.py</code></p>
<pre><code>from django.shortcuts import render


def index(request):
    context = {
        'list': [],
        'dict': {},
        'str': '',
        'none': None,
        'number': 0,
    }
    return render(request, 'index.html', context=context)
</code></pre>
<p><code>templates/index.html</code></p>
<pre><code>{# 空列表 #}
{{ list|default:'空列表' }}
{#空字典#}
{{ dict|default:'空字典' }}
{#空字符串#}
{{ str|default:'空字符串' }}
{#数字0#}
{{ number|default:'数字0' }}
{#None#}
{{ none|default:'None' }}
</code></pre>
<h2 id="default-if-none"><code>default-if-none</code></h2>
<p><strong>只有值为<code>None</code>才会起作用</strong></p>
<p><code>templates/index.html</code></p>
<pre><code>{#[]#}
{{ list|default_if_none:'空字典' }}
{{ str|default_if_none:'空字符串' }}
{#0#}
{{ number|default_if_none:'数字0' }}
{#None#}
{{ none|default_if_none:'None' }}
</code></pre>
<h2 id="first"><code>first</code></h2>
<p><strong>返回列表或元组中的第一个元素</strong></p>
<p><code>front/views.py</code></p>
<pre><code>from django.shortcuts import render


def index(request):
    context = {
        'student': ['威震天', '擎天柱']
    }
    return render(request, 'index.html', context=context)
</code></pre>
<p><code>templates/index.html</code></p>
<pre><code>{# 威震天 #}
{{ student|first }}
</code></pre>
<h2 id="last"><code>last</code></h2>
<p><strong>返回列表或元组中的最后一个元素</strong></p>
<p><code>templates/index.html</code></p>
<pre><code>{# 擎天柱 #}
{{ student|last }}
</code></pre>
<h2 id="floatformat"><code>floatformat</code></h2>
<p><strong>四舍五入格式化浮点类型</strong></p>
<ul>
<li>
<p>没有参数是，默认保留一位小数点</p>
</li>
<li>
<p>传递的参数代表小数点的位数</p>
</li>
</ul>
<p><code>templates/index.html</code></p>
<pre><code>{#3.1#}
{{ 3.141592654|floatformat }} &lt;br&gt;
{#3.14159 #}
{{ 3.141592654|floatformat:5 }} &lt;br&gt;
</code></pre>
<h2 id="join"><code>join</code></h2>
<p><strong>指定分隔符把元组或者列表，转换为字符串</strong></p>
<p><code>templates/index.html</code></p>
<pre><code>{#威震天-擎天柱#}
{{ student|join:'-' }}
</code></pre>
<h2 id="length"><code>length</code></h2>
<p><strong>返回元组、列表、字符串的长度</strong><br>
<code>templates/index.html</code></p>
<pre><code>{#2#}
{{ student|length }}
</code></pre>
<h2 id="lower"><code>lower</code></h2>
<p><strong>将字符串转换为小写</strong><br>
<code>templates/index.html</code></p>
<pre><code>{#abc#}
{{ &quot;ABC&quot;|lower }}
</code></pre>
<h2 id="upper"><code>upper</code></h2>
<p><strong>将字符串转换为大写</strong><br>
<code>templates/index.html</code></p>
<pre><code>{#ABC#}
{{ &quot;abc&quot;|upper }}
</code></pre>
<h2 id="random"><code>random</code></h2>
<p><strong>返回元组、列表、字符串中随机选取一个值</strong><br>
<code>templates/index.html</code></p>
<pre><code>{{ &quot;abc&quot;|random }}
</code></pre>
<h2 id="safe"><code>safe</code></h2>
<p><strong>标记一个字符串是安全的，包含特殊字符，也不会被转义， 类似关闭<code>autoescape</code>标签的自动转义</strong><br>
<code>templates/index.html</code></p>
<pre><code>{{ &quot;&lt;h1&gt;autoescape off&lt;/h1&gt;&quot;|safe }}
</code></pre>
<h2 id="slice"><code>slice</code></h2>
<p><strong>类似于<code>python</code>的切片操作</strong></p>
<p><code>front/views.py</code></p>
<pre><code>def index(request):
    context = {
        'data': list(range(10))
    }
    return render(request, 'index.html', context=context)
</code></pre>
<p><code>templates/index.html</code></p>
<pre><code>{#[1, 3, 5, 7, 9]#}
{{ data|slice:&quot;1::2&quot;}}
</code></pre>
<h2 id="striptags"><code>striptags</code></h2>
<p><strong>去除字符串中的 <code>HTML</code> 标签</strong></p>
<p><code>templates/index.html</code></p>
<pre><code>{{ &quot;&lt;h1&gt;去除字符串中的html标签&lt;/h1&gt;&quot;|striptags }}
</code></pre>
<h2 id="truncatechars"><code>truncatechars</code></h2>
<p><strong>显示指定字符长度，超出部分显示..., 三个点也纳入指定字符范围的长度</strong></p>
<p><code>templates/index.html</code></p>
<pre><code>{#显示...#}
{{ &quot;显示指定字符长度，超出部分显示...&quot;|truncatechars:5 }}
</code></pre>
<h2 id="truncatechars_html"><code>truncatechars_html</code></h2>
<p><strong>类似 <code>truncatechars</code>, 只不过不会切割 <code>HTML</code> 标签</strong><br>
<code>templates/index.html</code></p>
<pre><code>{{ &quot;&lt;h1&gt;显示指定字符长度，超出部分显示...&lt;/h1&gt;&quot;|truncatechars_html:5 }}
</code></pre>
<h2 id="其它不常用过滤器">其它不常用过滤器</h2>
<p><strong>可以在 <code>pycharm</code> 中， 查看源代码</strong></p>
<pre><code>from django.template import defaultfilters, defaulttags
# defaultfilters 查看内置过滤器
# defaulttags 查看内置标签
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django 模板标签详解]]></title>
        <id>https://xiong-zh.github.io/post/Django模板标签详解</id>
        <link href="https://xiong-zh.github.io/post/Django模板标签详解">
        </link>
        <updated>2020-01-18T13:05:34.000Z</updated>
        <summary type="html"><![CDATA[<p>Django 模板标签详解</p>
]]></summary>
        <content type="html"><![CDATA[<p>Django 模板标签详解</p>
<!-- more -->
<h1 id="dtl-模板标签详解"><code>DTL</code> 模板标签详解</h1>
<blockquote>
<p>接着上一篇 <a href="https://zhb333.github.io/readme-blog/Python/Django/urls.html" title="urls与视图详解">urls与视图详解</a> 继续往下讲</p>
</blockquote>
<h2 id="一-模板查找路径">一、模板查找路径</h2>
<p><code>mysite/setting.py</code>： 模板查找的优先级最高为如下配置</p>
<pre><code>TEMPLATES = [
    {
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
    },
]
</code></pre>
<p>其次是，在各自的 <code>app</code> 中， 注意， 需要在 <code>INSTALLED_APPS</code> 中注册后才能起作用：</p>
<pre><code>INSTALLED_APPS = [
    'front',
]

TEMPLATES = [
    {
        'APP_DIRS': True,
    },
]
</code></pre>
<p>最后如果在当前 <code>app</code> 中还找不到模板，会到其它已安装的 <code>app</code> 中查找， 如果还找不到就会报错了！</p>
<h2 id="二-render_to_string">二、<code>render_to_string</code></h2>
<ul>
<li>
<p>在根目录新建 <code>templates</code> 文件夹</p>
</li>
<li>
<p>创建 <code>templates/index.html</code></p>
</li>
</ul>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;Title&lt;/title&gt;
    &lt;style&gt;
        body {
            color: #f00;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
佛曰： 我执， 是痛苦的根源！
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<ul>
<li>修改 <code>front/urls.py</code></li>
</ul>
<pre><code> path('', views.index, name='index'),
</code></pre>
<ul>
<li>修改 <code>front/views.py</code></li>
</ul>
<pre><code>from django.template.loader import render_to_string
from django.http import HttpResponse


def index(request):
    # 在 mysite/settings.py 配置了项目模板路径
    html = render_to_string(&quot;index.html&quot;)
    return HttpResponse(html)
</code></pre>
<h2 id="三-render">三、<code>render</code></h2>
<blockquote>
<p><code>render_to_string</code> 与 <code>HttpResponse</code> 组合的快捷方式， 可 <code>pycharm</code> 查看 <code>render</code> 的实现如下：</p>
</blockquote>
<pre><code>def render(request, template_name, context=None, content_type=None, status=None, using=None):
    content = loader.render_to_string(template_name, context, request, using=using)
    return HttpResponse(content, content_type, status)
</code></pre>
<p>修改 <code>front/views.py</code></p>
<pre><code>from django.shortcuts import render


def index(request):
    return render(request, 'index.html')
</code></pre>
<h2 id="四-模板变量">四、模板变量</h2>
<blockquote>
<p>可以通过<code>render</code> 函数的 <code>context</code> 参数，给模板传递数据</p>
</blockquote>
<p><strong>模板中，不支持中括号语法，只能通过 <code>.</code> 语法获取</strong></p>
<ul>
<li>
<p>传递字符串</p>
<p>修改 <code>front/views.py</code></p>
</li>
</ul>
<pre><code>def index(request):
    context = {'username': 'zhb333'}
    return render(request, 'index.html', context=context)
</code></pre>
<pre><code>修改 `templates/index.html`
</code></pre>
<pre><code>    &lt;body&gt;
    {{ username }}
    &lt;/body&gt;
</code></pre>
<pre><code>访问：`http://localhost:8000/`, 页面显示： **zhb333**
</code></pre>
<ul>
<li>
<p>传递一个对象</p>
<p>修改 <code>front/views.py</code></p>
</li>
</ul>
<pre><code>class Person:
   def __init__(self, username):
        self.username = username


   def index(request):
        context = {'person': Person('理想三旬')}
        return render(request, 'index.html', context=context)
</code></pre>
<pre><code>修改 `templates/index.html`
</code></pre>
<pre><code>  {{ person.username }}
</code></pre>
<ul>
<li>
<p>传递的数据是一个字典时， 字典中不要出现关键字，这样会造成歧义</p>
<p>修改 <code>front/views.py</code></p>
</li>
</ul>
<pre><code>    def index(request):
        context = {'person': {'username': '我要你'}}
        return render(request, 'index.html', context=context)
</code></pre>
<pre><code>修改 `templates/index.html`  
</code></pre>
<pre><code>   {{ person.keys }}
</code></pre>
<pre><code>浏览器显示： **dict_keys(['username'])**  

修改 `front/views.py`
</code></pre>
<pre><code>def index(request):
     context = {'person': {'username': '我要你', 'keys': '夜空中最亮的星'}}
     return render(request, 'index.html', context=context)
</code></pre>
<pre><code>浏览器显示： **夜空中最亮的星**
</code></pre>
<ul>
<li>
<p>传递列表或元组</p>
<p>修改 <code>front/views.py</code></p>
</li>
</ul>
<pre><code>   # context = {'persons': ['那些花儿', '她们都老了吧', '她们在哪里呀']}
   context = {'persons': ('那些花儿', '她们都老了吧', '她们在哪里呀')}
</code></pre>
<pre><code>修改 `templates/index.html`  
</code></pre>
<pre><code>   {{ persons.0 }} &lt;br&gt;
   {{ persons.1 }} &lt;br&gt;
   {{ persons.2 }} &lt;br&gt;
</code></pre>
<h2 id="五-常用的模板标签">五 常用的模板标签</h2>
<p><strong>所有标签都需要用 <code>{%%}</code> 进行包裹</strong></p>
<ul>
<li><code>if</code> 标签
<blockquote>
<p><code>if</code> 标签中可以使用： <code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>、<code>in</code>、<code>not in</code>、<code>is</code>、<code>is not</code> 等判断运算符</p>
</blockquote>
<ul>
<li>
<p><code>if...else</code> 运算符举例</p>
<p>修改 <code>templates/index.html</code></p>
</li>
</ul>
</li>
</ul>
<pre><code>        {% if '那些花儿' in persons %}
            &lt;p style=&quot;color: hotpink&quot;&gt;可爱的花儿&lt;/p&gt;
        {% else %}
            &lt;p style=&quot;color: darkgray&quot;&gt;可伶的花儿&lt;/p&gt;
        {% endif %}
</code></pre>
<pre><code>* `if...elif...else` 举例
 修改 `templates/index.html`
</code></pre>
<pre><code>      {% if age &lt; 18 %}
            &lt;p&gt;乳臭未干的小子&lt;/p&gt;
      {% elif age == 18 %}
            &lt;p&gt;恰逢少年时&lt;/p&gt;
      {% else %}
            &lt;p&gt;老男人&lt;/p&gt;
      {% endif %}
</code></pre>
<ul>
<li>
<p><code>for...in</code> 循环列表</p>
<ul>
<li>
<p>循环列表</p>
<p>修改 <code>front/views.py</code></p>
</li>
</ul>
</li>
</ul>
<pre><code>    context = {
            'books': ['深入理解ES6', 'JavaScript权威指南', 'JavaScript语言精粹']
         }
</code></pre>
<pre><code>    修改 `templates/index.html`  
</code></pre>
<pre><code>    &lt;ul&gt;
       {% for book in books %}
             &lt;li&gt;{{ book }}&lt;/li&gt;
       {% endfor %}
    &lt;/ul&gt;
</code></pre>
<pre><code>* 反向循环列表  `reversed`

    修改 `templates/index.html`  
</code></pre>
<pre><code>     {% for book in books reversed %}
        &lt;li&gt;{{ book }}&lt;/li&gt;
     {% endfor %}
</code></pre>
<ul>
<li>
<p><code>for...in</code> 循环中， <code>DTL</code> 提供了一些可用的模板变量：</p>
<ul>
<li>
<p>列表的下标 <code>forloop.counter</code> 从 <code>1</code> 开始</p>
<p>修改 <code>templates/index.html</code></p>
</li>
</ul>
</li>
</ul>
<pre><code>   {% for book in books %}
      &lt;li&gt;{{ forloop.counter }} -- {{ book }}&lt;/li&gt;
   {% endfor %}
</code></pre>
<pre><code>* 列表的下标 `forloop.counter0` 从 `0` 开始

    修改 `templates/index.html`  
</code></pre>
<pre><code>        {% for book in books %}
            &lt;li&gt;{{ forloop.counter0 }} -- {{ book }}&lt;/li&gt;
        {% endfor %}
</code></pre>
<pre><code>* 列表的反向下标 `forloop.revcounter` 从 `1` 开始
</code></pre>
<pre><code>        {% for book in books reversed %}
            &lt;li&gt;{{ forloop.revcounter }} -- {{ book }}&lt;/li&gt;
        {% endfor %}
</code></pre>
<pre><code>* 列表的反向下标 `forloop.revcounter0` 从 `0` 开始
</code></pre>
<pre><code>        {% for book in books reversed %}
            &lt;li&gt;{{ forloop.revcounter0 }} -- {{ book }}&lt;/li&gt;
        {% endfor %}
</code></pre>
<pre><code>* 是否是第一次遍历 `forloop.first`
</code></pre>
<pre><code>        {% for book in books %}
            {% if forloop.first %}
                &lt;li style=&quot;color: green;&quot;&gt;{{ forloop.revcounter0 }} -- {{ book }}&lt;/li&gt;
            {% else %}
                &lt;li style=&quot;color: red;&quot;&gt;{{ forloop.revcounter0 }} -- {{ book }}&lt;/li&gt;
            {% endif %}
        {% endfor %}
</code></pre>
<pre><code>* 是否是最后一次次遍历 `forloop.last`
</code></pre>
<pre><code>        {% for book in books %}
            {% if forloop.last %}
                &lt;li style=&quot;color: green;&quot;&gt;{{ forloop.revcounter0 }} -- {{ book }}&lt;/li&gt;
            {% else %}
                &lt;li style=&quot;color: red;&quot;&gt;{{ forloop.revcounter0 }} -- {{ book }}&lt;/li&gt;
            {% endif %}
        {% endfor %}
</code></pre>
<pre><code>* 调用上一级循环的 `forloop` 模板变量  `forloop.parentloop`  
    修改 `front/views.py` 
</code></pre>
<pre><code>    context = {
      'family': [{'father': '大头爸爸', 'children': ['小头孩儿', '小头女儿']}]
      }
</code></pre>
<pre><code>     修改 `templates/index.html`  
</code></pre>
<pre><code>        {% for who in family %}
            &lt;p&gt;this is &lt;strong style=&quot;color: green&quot;&gt;{{ who.father }}&lt;/strong&gt;&lt;/p&gt;
            {% for child in who.children %}
                &lt;p&gt;{{ child }}&lt;/p&gt;
                &lt;p&gt;{{ forloop.parentloop.first }}&lt;/p&gt;
                &lt;p&gt;{{ forloop.parentloop.last }}&lt;/p&gt;
                &lt;p&gt;{{ forloop.parentloop.counter }}&lt;/p&gt;
                &lt;p&gt;{{ forloop.parentloop.revcounter }}&lt;/p&gt;
            {% endfor %}
        {% endfor %}
</code></pre>
<ul>
<li>
<p><code>for...in</code> 循环字典</p>
<ul>
<li>循环字典 <code>keys</code><br>
修改 <code>front/views.py</code></li>
</ul>
</li>
</ul>
<pre><code>           context = {'student': {
                'name': '道明寺',
                'girl': '杉菜',
                'age': '18',
            }}
</code></pre>
<pre><code>    修改 `templates/index.html`  

    ```
    &lt;ul&gt;
        {% for key in student.keys %}
            &lt;li&gt;{{ key }}&lt;/li&gt;
        {% endfor %}
    &lt;/ul&gt;
    ```      
    
* 循环字典 `values`    

    修改 `templates/index.html`  

    ```
    {% for value in student.values %}
        &lt;li&gt;{{ value }}&lt;/li&gt;
    {% endfor %}
    ```   

* 循环字典 `items`    

    修改 `templates/index.html`  

    ```
    {% for key,value in student.items %}
        &lt;li&gt;{{ key }}--{{ value }}&lt;/li&gt;
    {% endfor %}
    ```   
</code></pre>
<ul>
<li>
<p><code>for...in...empty...</code></p>
<p>修改 <code>front/views.py</code></p>
</li>
</ul>
<pre><code>    context = {
    'comments': []
    }
</code></pre>
<pre><code>修改 `templates/index.html`  
</code></pre>
<pre><code>    {% for comment in comments %}
        {{ comment }}
    {% empty %}
        还没有任何评论
    {% endfor %}
</code></pre>
<ul>
<li>
<p><code>with</code> 标签 （在模板中定义变量）</p>
<p><strong>通过 <code>with</code> 标签定义的变量只能在， 只能在 <code>with</code> 标签包裹的语句块中使用</strong></p>
<p>修改 <code>front/views.py</code></p>
</li>
</ul>
<pre><code>    context = {
        'students': ['孙悟空', '猪八戒', '沙和尚']
    }
</code></pre>
<pre><code>修改 `templates/index.html`  
</code></pre>
<pre><code>    {% with students.0 as monkey %}
        {{ monkey }}
    {% endwith %}

    {% with pig=students.1 %}
        {{ pig }}
    {% endwith %}
</code></pre>
<ul>
<li>
<p><code>url</code> 标签</p>
<p><strong>通过 <code>url</code> 标签 可以把 <code>urls.py</code> 中， 对应的 <code>path</code> 或 <code>re_path</code> 的命名，转换化为浏览器可识别的链接</strong></p>
<p>修改 <code>front/urls.py</code></p>
</li>
</ul>
<pre><code>    from django.urls import path
    from . import views

    app_name = 'front'

    urlpatterns = [
        path('', views.index, name='index'),
        path('book/&lt;book_id&gt;/', views.book, name='book'),
        path('movie/', views.movie, name='movie'),
        path('story/&lt;story_id&gt;/&lt;category&gt;/', views.story, name='story'),
    ]
</code></pre>
<pre><code>修改 `front/views.py`
</code></pre>
<pre><code>    from django.http import HttpResponse
    from django.template.loader import render_to_string


    def index(request):
        return HttpResponse(render_to_string('index.html'))


    def book(request, book_id):
        return HttpResponse('书籍, %s' % book_id)


    def movie(request):
        movie_id = request.GET.get('movie_id')
        return HttpResponse('电影, %s' % movie_id)


    def story(request, story_id, category):
        _type = request.GET.get('type')
        return HttpResponse('故事id: %s, 分类： %s, 类型： %s' % (story_id, category, _type))
</code></pre>
<pre><code>修改 `templates/index.html`  
</code></pre>
<pre><code>    &lt;p&gt;&lt;a href=&quot;{% url 'front:index' %}&quot;&gt;首页&lt;/a&gt;&lt;/p&gt;
    &lt;p&gt;&lt;a href=&quot;{% url 'front:book' book_id=1 %}&quot;&gt;书籍&lt;/a&gt;&lt;/p&gt;
    &lt;p&gt;&lt;a href=&quot;{% url 'front:movie' %}?movie_id=2&quot;&gt;电影&lt;/a&gt;&lt;/p&gt;
    &lt;p&gt;&lt;a href=&quot;{% url 'front:story' story_id=3 category='冒险' %}?type=未知&quot;&gt;故事&lt;/a&gt;&lt;/p&gt;
</code></pre>
<ul>
<li>
<p><code>spaceless</code> 标签 （去除html代码中的空白字符）</p>
<p><strong>下面的 <code>html</code> 模板代码存在很多空白字符，可以通过 <code>spaceless</code> 标签去除</strong></p>
</li>
</ul>
<pre><code>    {% spaceless %}
        &lt;ul&gt;
            &lt;li&gt;
                &lt;a href=&quot;https://www.baidu.com&quot;&gt;
                    百度
                &lt;/a&gt;
            &lt;/li&gt;
        &lt;/ul&gt;
    {% endspaceless %}
</code></pre>
<ul>
<li>
<p><code>autoescape</code>标签 （默认开启了特殊字符自动转义）</p>
<p><strong>可以通过设置 <code>autoescape</code> 标签的自动转义 为 <code>off</code>, 关闭自动转义</strong><br>
修改 <code>front/urls.py</code></p>
</li>
</ul>
<pre><code>    urlpatterns = [
        path('', views.index, name='index'),
    ]
</code></pre>
<pre><code>修改 `front/views.py`
</code></pre>
<pre><code>    from django.shortcuts import render


    def index(request):
        return render(request, 'index.html', context={'link': '&lt;p&gt;&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt;&lt;/p&gt;'})
</code></pre>
<pre><code>修改 `templates/index.html`
</code></pre>
<pre><code>    &lt;body&gt;
    {{ link }}
    {% autoescape off %}
        {{ link }}
    {% endautoescape %}
    &lt;/body&gt;
</code></pre>
<ul>
<li><code>verbatim</code> 标签<br>
<strong>当不想要<code>DTL</code>编译 {{}} 或 {%%} 时， 可以通过 <code>verbatim</code> 标签包裹</strong></li>
</ul>
<pre><code>    {% verbatim %}
        {{ 哈哈 }}
        {% 呵呵 %}
    {% endverbatim %}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django ORM常用Field详解]]></title>
        <id>https://xiong-zh.github.io/post/Django-ORM常用Field详解</id>
        <link href="https://xiong-zh.github.io/post/Django-ORM常用Field详解">
        </link>
        <updated>2020-01-18T13:04:14.000Z</updated>
        <summary type="html"><![CDATA[<p>Django ORM常用Field详解</p>
]]></summary>
        <content type="html"><![CDATA[<p>Django ORM常用Field详解</p>
<!-- more -->
<h2 id="一-常用的field">一、常用的<code>Field</code></h2>
<p><code>book/models.py</code></p>
<pre><code>class Fields(models.Model):

    # 映射到数据库中是int类型，可以有自动增长的特性。一般不需要使用这个类型，如果不指定主键，那么模型会自动的生成一个叫做id的自动增长的主键。
    # auto_id = models.AutoField()

    # 64位的整形，类似于AutoField，只不过是产生的数据的范围是从1-9223372036854775807
    id = models.BigAutoField(primary_key=True)

    # 在模型层面接收的是True / False。在数据库层面是tinyint类型 存储的是 0/1。如果没有指定默认值，默认值是None。
    removed = models.BooleanField()

    # 在数据库层面是varchar类型。在Python层面就是普通的字符串。这个类型在使用的时候必须要指定最大的长度，也即必须要传递max_length
    title = models.CharField(max_length=100)

    # 日期类型。在Python中是datetime.date类型，可以记录年月日。在映射到数据库中也是date类型。使用这个Field可以传递以下几个参数：
    #
    # auto_now：最后一次修改时间，可以将这个属性设置为True。
    # auto_now_add：新增时间，可以将这个属性设置为True。
    birth = models.DateField(auto_now_add=True)

    # 日期时间类型，类似于DateField。不仅仅可以存储日期，还可以存储时间。映射到数据库中是datetime类型。这个Field也可以使用auto_now和auto_now_add两个属性。
    created_time = models.DateTimeField(auto_now_add=True)

    # 时间类型。在数据库中是time类型。在Python中是datetime.time类型。
    lunch_time = models.TimeField()

    # 类似于CharField。在数据库底层也是一个varchar类型。最大长度是254个字符。并不验证邮箱格式，配合 ModelForm 使用时，才会与进行邮箱格式验证
    email = models.EmailField()

    # 用来存储文件的。这个请参考后面的文件上传章节部分。
    # file = models.FileField()

    # 用来存储图片文件的。这个请参考后面的图片上传章节部分。
    # image = models.ImageField()

    # 浮点类型。映射到数据库中是double类型。
    price = models.FloatField()

    # 整形。值的区间是-2147483648——2147483647
    age = models.IntegerField()

    # 大整形。值的区间是-9223372036854775808——9223372036854775807。
    total = models.BigIntegerField()

    # 正整形。值的区间是0——2147483647。
    money = models.PositiveIntegerField()

    # 小整形。值的区间是-32768——32767。
    apple = models.SmallIntegerField()

    # 小整形。值的区间是-32768——32767。
    pear = models.PositiveSmallIntegerField()

    # 小整形。值的区间是-32768——32767。
    content = models.TextField()

    # 只能存储uuid格式的字符串。uuid是一个32位的全球唯一的字符串，一般用来作为主键。
    uuid = models.UUIDField()

    # 类似于CharField，只不过只能用来存储url格式的字符串。并且默认的max_length是200。
    url = models.URLField()
</code></pre>
<h2 id="二-注意事项">二、注意事项：</h2>
<ul>
<li>已经将模型映射到数据库后，修改或新增表字段，如果没有提供默认值，在生成迁移文件时，会提供两个选项，让你添加默认值</li>
</ul>
<pre><code>  (myenv) E:\code\PythonEnvs\myenv\book_manager&gt;python manage.py makemigrations
  You are trying to add a non-nullable field 'age' to fields without a default; we can't do that (the database nee
  ds something to populate existing rows).
  Please select a fix:
  1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
  2) Quit, and let me add a default in models.py
</code></pre>
<ul>
<li>
<p>使用 <code>DateField</code>、 <code>DateTimeField</code> 的自动添加时间参数 <code>auto_now_add</code> 或 <code>auto_now</code>， 添加到数据库使用的是 <code>django.utils.timezone.now()</code> , 这是一个  <code>UTC</code> 时间， 为了在模板中正确显示当前时区的时间，需要配置正确时区</p>
<p><code>book_manager/settings.py</code></p>
</li>
</ul>
<pre><code>  TIME_ZONE = 'Asia/Shanghai'
</code></pre>
<hr>
<p><code>book_manager/urls.py</code></p>
<pre><code>  from django.urls import path, include

  urlpatterns = [
      path('', include('book.urls')),
  ]
</code></pre>
<hr>
<p><code>book/urls.py</code></p>
<pre><code>  from django.urls import path
  from . import views

  app_name = 'book'

  urlpatterns = [
      path('', views.index, name='index')
  ]
</code></pre>
<hr>
<p><code>book/models.py</code></p>
<pre><code>  class Book(models.Model):
      id = models.AutoField(primary_key=True)
      title = models.CharField(max_length=100, null=False)
      author = models.CharField(max_length=100, null=False)
      price = models.FloatField(default=0)
      create_time = models.DateTimeField(auto_now_add=True)
</code></pre>
<hr>
<p><code>book/views.py</code></p>
<pre><code>  from django.shortcuts import render
  from . import models

  def index(request):
      book = models.Book(title='精通ES6', author='zhb333', price=333)
      book.save()
      obj = models.Book.objects.get(pk=1)
      # UTC 时间
      return render(request, 'book/index.html', context={'create_time': obj.create_time})
</code></pre>
<hr>
<p><code>book/templates/book/index.html</code></p>
<pre><code>  {#正确配置时区，即便存储在数据库中的时间是UTC时间，模板中也会正确显示配置的时区所对应的时间#}
  {{ create_time }}
</code></pre>
<h2 id="三-其它不常用的-field">三、其它不常用的 <code>Field</code></h2>
<p><strong>可以在 <code>pycharm</code> 中按<code>ctrl</code> 并点击任一个 <code>Field</code>进入所有<code>Field</code>的定义文件查看</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django创建和映射ORM模型到数据库]]></title>
        <id>https://xiong-zh.github.io/post/Django创建和映射ORM模型到数据库</id>
        <link href="https://xiong-zh.github.io/post/Django创建和映射ORM模型到数据库">
        </link>
        <updated>2020-01-18T13:03:08.000Z</updated>
        <summary type="html"><![CDATA[<p>Django创建和映射ORM模型到数据库</p>
]]></summary>
        <content type="html"><![CDATA[<p>Django创建和映射ORM模型到数据库</p>
<!-- more -->
<h2 id="1-新建应用-book">1、新建应用 <code>book</code></h2>
<pre><code>python manage.py startapp book
</code></pre>
<h2 id="2-配置-book-为已安装应用">2、配置 <code>book</code> 为已安装应用</h2>
<p><code>book_manager/settings.py</code></p>
<pre><code>INSTALLED_APPS = [
    'book',
]
</code></pre>
<h2 id="3-创建模型">3、创建模型</h2>
<p><code>book/models.py</code></p>
<pre><code>from django.db import models
# Create your models here.

class Book(models.Model):
    id = models.AutoField(primary_key=True)
    title = models.CharField(max_length=100, null=False)
    author = models.CharField(max_length=100, null=False)
    price = models.FloatField(default=0)
</code></pre>
<h2 id="4-生成数据库迁移文件">4、生成数据库迁移文件</h2>
<pre><code>python manage.py makemigrations
</code></pre>
<h2 id="5-将已安装的应用的迁移文件映射到数据库">5、将已安装的应用的迁移文件映射到数据库</h2>
<pre><code>python manage.py migrate
</code></pre>
<p><strong>注意：</strong></p>
<ol>
<li>
<p>如果在模型中不指定表名，默认是以 应用名_模型名（小写）如：<code>book_book</code> 作为表名</p>
</li>
<li>
<p>模型中默认以 <code>id</code> 作为主键，因此在模型中可以省略主键的定义即：</p>
<p><code>book/models.py</code></p>
</li>
</ol>
<pre><code>    class Book(models.Model):
        title = models.CharField(max_length=100, null=False)
        author = models.CharField(max_length=100, null=False)
        price = models.FloatField(default=0)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django操作数据库原生SQL初体验]]></title>
        <id>https://xiong-zh.github.io/post/Django操作数据库原生SQL初体验</id>
        <link href="https://xiong-zh.github.io/post/Django操作数据库原生SQL初体验">
        </link>
        <updated>2020-01-18T13:00:51.000Z</updated>
        <summary type="html"><![CDATA[<p>Django - Django 操作数据库-原生SQL初体验</p>
]]></summary>
        <content type="html"><![CDATA[<p>Django - Django 操作数据库-原生SQL初体验</p>
<!-- more -->
<h2 id="一-安装-mysqlclient">一、安装 <code>mysqlclient</code></h2>
<pre><code>pip install mysqlclient
</code></pre>
<h2 id="二-配置连接数据库">二、 配置连接数据库</h2>
<p><code>mysite/settings.py</code></p>
<pre><code>DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        # 数据库名
        'NAME': 'django_db1',
        'USER': 'root',
        'PASSWORD': '123456',
        'HOST': '127.0.0.1',
        'PORT': '3306',
    }
}
</code></pre>
<h2 id="三-使用原生-sql-操作数据库">三、使用原生 <code>sql</code> 操作数据库</h2>
<ul>
<li>
<p>使用 <code>navicat</code> 新建数据库 <code>django_db1</code></p>
</li>
<li>
<p>在数据库 <code>django_db1</code> 新建表 <code>book</code></p>
</li>
<li>
<p>新增数据：</p>
<p><code>front/views.py</code></p>
</li>
</ul>
<pre><code>from django.shortcuts import render
from django.db import connection
def index(request):
      cursor = connection.cursor()
      cursor.execute(&quot;insert into book(title,author) values('深入理解ES6', '尼古拉斯')&quot;)
      return render(request, 'front/index.html')
</code></pre>
<ul>
<li>
<p>浏览器访问： <code>localhost:8000</code>, 便会新增一条数据</p>
</li>
<li>
<p>查询数据</p>
<p><code>front/views.py</code></p>
</li>
</ul>
<pre><code>    def index(request):
    cursor = connection.cursor()
    cursor.execute(&quot;select * from book&quot;)
    # 查询一条数据
    # row = cursor.fetchone()
    # 指定查询的条数
    # rows = cursor.fetchmany(2)
    # 查询所有数据
    rows = cursor.fetchall()
    for row in rows:
        print(row)
    return render(request, 'front/index.html')
</code></pre>
<h2 id="四-python-db-api下-cursor对象常用接口">四、<code>Python DB API</code>下 <code>cursor</code>对象，常用接口</h2>
<ul>
<li>
<p><code>description</code></p>
<p>执行 <code>cursor.execute</code>后，可通过 <code>cursor.description</code> 查看字段信息</p>
<p><code>front/views.py</code></p>
</li>
</ul>
<pre><code>    def index(request):
    cursor = connection.cursor()
    cursor.execute(&quot;select * from book&quot;)
    # (('id', 3, 1, 11, 11, 0, 0), ('title', 253, 15, 765, 765, 0, 0), ('author', 253, 12, 765, 765, 0, 0))
    print(cursor.description)
    rows = cursor.fetchall()
    for row in rows:
        print(row)
    return render(request, 'front/index.html')
</code></pre>
<ul>
<li>
<p><code>rowcount</code></p>
<p>执行 <code>sql</code> 删除，新增，修改时，返回受影响的条数， 查询时，返回查询数据的条数</p>
<p><code>front/views.py</code></p>
</li>
</ul>
<pre><code>    def index(request):
    cursor = connection.cursor()
    cursor.execute(&quot;delete from book where id=2&quot;)
    # 1
    print(cursor.rowcount)
    return render(request, 'front/index.html')
</code></pre>
<ul>
<li>
<p><code>close</code></p>
<p>关闭游标</p>
</li>
</ul>
<pre><code>   cursor.close()
</code></pre>
<ul>
<li>
<p><code>execute</code></p>
<p>用于执行 <code>sql</code> 语句， 还可以传递参数</p>
</li>
</ul>
<pre><code> cursor.execute('select * from book where id=%s', (1,))
</code></pre>
<ul>
<li><code>fetchone</code></li>
<li><code>fetchmany</code></li>
<li><code>fetchall</code></li>
</ul>
<pre><code>    # 查询一条数据
    row = cursor.fetchone()
    # 指定查询的条数
    rows = cursor.fetchmany(2)
    # 查询所有数据
    rows = cursor.fetchall()
</code></pre>
<h2 id="五-图书管理系统案例">五、图书管理系统案例</h2>
<ul>
<li>进入虚拟环境</li>
</ul>
<pre><code>   workon myenv
</code></pre>
<ul>
<li>创建一个新的项目</li>
</ul>
<pre><code>    django-admin startproject book_manager
</code></pre>
<ul>
<li>创建 <code>front</code> 应用</li>
</ul>
<pre><code>    cd book_manager
    python manage.py startapp front
</code></pre>
<ul>
<li>配置将 <code>front</code> 应用，注册到已安装应用<br>
<code>book_manager/setting.py</code></li>
</ul>
<pre><code>    INSTALLED_APPS = [
        'front',
    ]
</code></pre>
<hr>
<ol>
<li>
<p>使用 <code>Navicat</code> 创建数据库 <code>book_manager</code></p>
</li>
<li>
<p>创建表 <code>book</code>, 三个字段： <code>id</code>、 <code>title</code>、 <code>author</code></p>
</li>
<li>
<p>配置数据库连接<br>
<code>book_manager/settings.py</code></p>
</li>
</ol>
<pre><code>    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            # 数据库名
            'NAME': 'book_manager',
            'USER': 'root',
            'PASSWORD': '123456',
            'HOST': '127.0.0.1',
            'PORT': '3306',
        }
    }
</code></pre>
<ol start="4">
<li>
<p>配置路由</p>
<p><code>book_manager/urls.py</code></p>
</li>
</ol>
<pre><code>    from django.urls import path, include

    urlpatterns = [
        path('', include('front.urls')),
    ]
</code></pre>
<pre><code>`front/urls.py`
</code></pre>
<pre><code>    from django.urls import path
    from . import views

    app_name = 'front'

    urlpatterns = [
        path('', views.index, name='index'),
        path('create/', views.create_book, name='create'),
        path('detail/&lt;int:book_id&gt;', views.book_detail, name='detail'),
        path('delete/&lt;int:book_id&gt;', views.book_delete, name='delete'),
        path('edit/&lt;int:book_id&gt;', views.book_edit, name='edit'),
    ]
</code></pre>
<ol start="5">
<li>
<p>编写视图函数</p>
<p><code>front/views.py</code></p>
</li>
</ol>
<pre><code>    from django.shortcuts import render, reverse, redirect
    from django.db import connection


    # 获取操作数据库锚点
    def get_cursor():
        return connection.cursor()

    # 首页，展示所有图书
    def index(request):
        cursor = get_cursor()
        cursor.execute('select * from book')
        keys = [item[0] for item in cursor.description]
        books = [dict(zip(keys, values)) for values in cursor.fetchall()]
        cursor.close()
        return render(request, 'front/index.html', context={&quot;books&quot;: books})

    # 新增图书
    def create_book(request):
        if request.method == 'POST':
            title = request.POST.get('title')
            author = request.POST.get('author')
            cursor = get_cursor()
            cursor.execute('insert into book(title, author) values(%s, %s)', (title, author))
            cursor.close()
            return redirect(reverse('front:index'))
        else:
            return render(request, 'front/create.html')

    # 图书详情
    def book_detail(request, book_id):
        cursor = get_cursor()
        cursor.execute('select * from book where id=%s', (book_id,))
        keys = [item[0] for item in cursor.description]
        book = dict(zip(keys, cursor.fetchone()))
        cursor.close()
        return render(request, 'front/detail.html', context={&quot;book&quot;: book})

    # 删除图书
    def book_delete(request, book_id):
        cursor = get_cursor()
        cursor.execute('delete from book where id=%s', (book_id,))
        cursor.close()
        return redirect(reverse('front:index'))

    # 编辑图书
    def book_edit(request, book_id):
        cursor = get_cursor()
        if request.method == 'GET':
            cursor.execute('select * from book where id=%s', (book_id,))
            keys = [item[0] for item in cursor.description]
            book = dict(zip(keys, cursor.fetchone()))
            cursor.close()
            return render(request, 'front/edit.html', context={&quot;book&quot;: book})
        else:
            title = request.POST.get('title')
            author = request.POST.get('author')
            cursor.execute('update book set title=%s, author=%s where id=%s', (title, author, book_id))
            cursor.close()
            return redirect(reverse('front:index'))
</code></pre>
<ol start="6">
<li>将 <code>static</code> 注册为模板标签<br>
<code>book_manager/settings.py</code></li>
</ol>
<pre><code>    TEMPLATES = [
        {
            'OPTIONS': {
                'builtins': [
                    'django.templatetags.static'
                ],
            },
        },
    ]
</code></pre>
<ol start="7">
<li>关闭表单 <code>csrf</code> 验证<br>
<code>book_manager/settings.py</code></li>
</ol>
<pre><code>    MIDDLEWARE = [
        # 'django.middleware.csrf.CsrfViewMiddleware',
    ]
</code></pre>
<ol start="6">
<li>编写模板<br>
<code>front/templates/front/base.html</code></li>
</ol>
<pre><code>    &lt;!DOCTYPE html&gt;
    &lt;html lang=&quot;en&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot;&gt;
        &lt;title&gt;图书管理系统&lt;/title&gt;
        &lt;link rel=&quot;stylesheet&quot; href=&quot;{% static 'front/style.css' %}&quot;&gt;
    &lt;/head&gt;
    &lt;body&gt;
        {% include 'front/header.html' %}
        {% block content %}
        {% endblock %}
    &lt;/body&gt;
    &lt;/html&gt;
</code></pre>
<pre><code>`front/templates/front/header.html`
</code></pre>
<pre><code>     &lt;header&gt;
        &lt;nav&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href=&quot;/&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;/create/&quot;&gt;新增图书&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
        &lt;/nav&gt;
    &lt;/header&gt;
</code></pre>
<pre><code>`front/templates/front/index.html`
</code></pre>
<pre><code>    {% extends &quot;front/base.html&quot; %}

    {% block content %}
        &lt;h1&gt;所有图书&lt;/h1&gt;
        &lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; &gt;
            &lt;thead&gt;
                &lt;tr&gt;
                    &lt;th class=&quot;table-id&quot;&gt;序号&lt;/th&gt;
                    &lt;th class=&quot;table-title&quot;&gt;书名&lt;/th&gt;
                    &lt;th class=&quot;table-author&quot;&gt;作者&lt;/th&gt;
                &lt;/tr&gt;
            &lt;/thead&gt;
            &lt;tbody&gt;
                {% for book in books %}
                    &lt;tr&gt;
                        &lt;td class=&quot;table-id&quot;&gt;{{ forloop.counter }}&lt;/td&gt;
                        &lt;td class=&quot;table-title&quot;&gt;&lt;a href=&quot;{% url 'front:detail' book_id=book.id %}&quot;&gt;{{ book.title }}&lt;/a&gt;&lt;/td&gt;
                        &lt;td class=&quot;table-author&quot;&gt;{{ book.author }}&lt;/td&gt;
                    &lt;/tr&gt;
                {% endfor %}
            &lt;/tbody&gt;
        &lt;/table&gt;
    {% endblock %}
</code></pre>
<pre><code>`front/templates/front/create.html`
</code></pre>
<pre><code>    {% extends &quot;front/base.html&quot; %}

    {% block content %}
        &lt;h1&gt;新增图书&lt;/h1&gt;
        &lt;form action=&quot;&quot; method=&quot;post&quot; id=&quot;create-form&quot;&gt;
            &lt;p&gt;
                &lt;label for=&quot;title&quot;&gt; 书名：
                    &lt;input type=&quot;text&quot; class=&quot;input-text&quot; name=&quot;title&quot; id=&quot;title&quot; required&gt;
                &lt;/label&gt;
            &lt;/p&gt;
            &lt;p&gt;
                &lt;label for=&quot;author&quot;&gt; 作者：
                    &lt;input type=&quot;text&quot; class=&quot;input-text&quot; name=&quot;author&quot; id=&quot;author&quot; required&gt;
                &lt;/label&gt;
            &lt;/p&gt;
            &lt;p&gt;
                &lt;input type=&quot;submit&quot; value=&quot;新增图书&quot; class=&quot;default-btn&quot;&gt;
            &lt;/p&gt;
        &lt;/form&gt;
    {% endblock %}
</code></pre>
<pre><code>`front/templates/front/detail.html`
</code></pre>
<pre><code>    {% extends &quot;front/base.html&quot; %}

    {% block content %}
        &lt;h1&gt;图书详情&lt;/h1&gt;
        &lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;
            {% for key, value in book.items %}
                &lt;tr&gt;
                    &lt;td class=&quot;table-id&quot;&gt;{{ key }}&lt;/td&gt;
                    &lt;td class=&quot;table-title&quot;&gt;{{ value }}&lt;/td&gt;
                &lt;/tr&gt;
            {% endfor %}
            &lt;tr&gt;
                &lt;td class=&quot;table-id&quot;&gt;&lt;button id=&quot;book-del&quot; class=&quot;small-danger-btn&quot;&gt;删除&lt;/button&gt;&lt;/td&gt;
                &lt;td class=&quot;table-title&quot;&gt;&lt;button id=&quot;book-edit&quot; class=&quot;small-default-btn&quot;&gt;编辑&lt;/button&gt;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;

        &lt;script&gt;
            const delBtn = document.querySelector('#book-del');
            const editBtn = document.querySelector('#book-edit');

            delBtn.onclick = function() {
                window.location.href = '{% url 'front:delete' book_id=book.id %}'
            };

            editBtn.onclick = function() {
                window.location.href = '{% url 'front:edit' book_id=book.id %}'
            };
        &lt;/script&gt;
    {% endblock %}
</code></pre>
<pre><code>`front/templates/front/edit.html`
</code></pre>
<pre><code>    {% extends &quot;front/base.html&quot; %}

    {% block content %}
        &lt;h1&gt;编辑图书&lt;/h1&gt;
        &lt;form action=&quot;{% url 'front:edit' book_id=book.id %}&quot; method=&quot;post&quot; id=&quot;create-form&quot;&gt;
            &lt;p&gt;
                &lt;label for=&quot;title&quot;&gt; 书名：
                    &lt;input type=&quot;text&quot; class=&quot;input-text&quot; value=&quot;{{ book.title }}&quot; name=&quot;title&quot; id=&quot;title&quot; required&gt;
                &lt;/label&gt;
            &lt;/p&gt;
            &lt;p&gt;
                &lt;label for=&quot;author&quot;&gt; 作者：
                    &lt;input type=&quot;text&quot; class=&quot;input-text&quot; value=&quot;{{ book.author }}&quot; name=&quot;author&quot; id=&quot;author&quot; required&gt;
                &lt;/label&gt;
            &lt;/p&gt;
            &lt;p&gt;
                &lt;input type=&quot;submit&quot; value=&quot;编辑图书&quot; class=&quot;default-btn&quot;&gt;
            &lt;/p&gt;
        &lt;/form&gt;
    {% endblock %}
</code></pre>
<pre><code>`front/static/front/style.css`
</code></pre>
<pre><code>    body, ul, li, h1{
        padding: 0;
        margin: 0;
    }

    nav ul {
        list-style: none;
        height: 60px;
        background-color: #333;
    }

    nav li {
        padding: 0 10px;
        float: left;
        text-align: center;
        line-height: 60px;
    }

    nav a {
        width: 120px;
        display: block;
        height: 60px;
        font-size: 22px;
        color: #fff;
        font-weight: bold;
        text-decoration: none;
    }

    nav a:hover {
        color: lightblue;
    }

    #create-form {
        width: 600px;
        height: 300px;
        background-color: #abcdef;
        margin: 15px auto;
    }

    #create-form p {
        text-align: center;
        padding-top:  25px;
    }

    .input-text {
        width: 200px;
        height: 30px;
        border-radius: 5px;
        border: 1px solid lightblue;
    }

    .default-btn {
        width: 150px;
        height: 50px;
        border-radius: 10px;
        color: #fff;
        background-color: lightgreen;
        line-height: 30px;
        text-align: center;
        border: 1px solid #89a1a9;
    }

    .small-default-btn {
        width: 100px;
        height: 35px;
        border-radius: 10px;
        color: #fff;
        background-color: lightgreen;
        line-height: 30px;
        text-align: center;
        border: 1px solid #89a1a9;
    }

    .small-danger-btn {
        width: 100px;
        height: 35px;
        border-radius: 10px;
        color: #fff;
        background-color: darkred;
        line-height: 30px;
        text-align: center;
        border: 1px solid #89a1a9;
    }

    table {
        margin: 25px auto;
    }

    td, th {
        border: 1px solid lightblue;
        text-align: center;
    }

    .table-id {
        width: 100px;
        height: 50px;
    }

    .table-title {
        width: 500px;
        height: 50px;
    }

    .table-author {
        width: 300px;
        height: 50px;
    }


    h1 {
        text-align: center;
        color: #333;
    }
</code></pre>
]]></content>
    </entry>
</feed>